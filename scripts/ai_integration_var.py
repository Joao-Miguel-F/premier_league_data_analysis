#!/usr/bin/env python3
"""
Integra√ß√£o de IA - Impacto do VAR na Premier League

OBJETIVO:
    Aplicar modelos de IA para enriquecer a an√°lise do impacto do VAR:
    1. Gera√ß√£o de relat√≥rio executivo para stakeholders
    2. An√°lise preditiva de marca√ß√µes futuras
    3. Gera√ß√£o de insights narrativos

MODELOS UTILIZADOS:
    - OpenAI GPT (via API) para gera√ß√£o de texto e an√°lise
    - Regress√£o linear simples para predi√ß√£o

AUTOR: AI Integration para Entrevista T√©cnica
DATA: 2025-10-27
"""

import pandas as pd
import numpy as np
import os
from openai import OpenAI

# ============================================================================
# CONFIGURA√á√ïES
# ============================================================================

DATA_DIR = "../data"
OUTPUT_DIR = "../data/ai_results"
os.makedirs(OUTPUT_DIR, exist_ok=True)

# Inicializar cliente OpenAI
client = OpenAI()

# ============================================================================
# FUN√á√ïES DE IA
# ============================================================================

def load_var_data():
    """
    Carrega dados de an√°lise do VAR.
    
    Returns:
        Tuple com (df_raw, df_comparison, df_analysis)
    """
    print("="*60)
    print("CARREGANDO DADOS DE AN√ÅLISE DO VAR")
    print("="*60)
    
    df_raw = pd.read_csv(f"{DATA_DIR}/var_raw_data.csv")
    df_comparison = pd.read_csv(f"{DATA_DIR}/var_comparison.csv")
    df_analysis = pd.read_csv(f"{DATA_DIR}/var_analysis.csv")
    
    print(f"\n‚úì Dados brutos carregados: {len(df_raw)} registros")
    print(f"‚úì An√°lise comparativa carregada")
    print(f"‚úì An√°lise de impacto carregada")
    
    return df_raw, df_comparison, df_analysis

def generate_stakeholder_report(df_comparison, df_analysis):
    """
    Gera relat√≥rio executivo para stakeholders (dirigentes, m√≠dia).
    
    Args:
        df_comparison: DataFrame com compara√ß√£o de per√≠odos
        df_analysis: DataFrame com an√°lise de impacto
    
    Returns:
        Tuple (relat√≥rio, prompt)
    """
    print("\n" + "="*60)
    print("1. RELAT√ìRIO EXECUTIVO PARA STAKEHOLDERS")
    print("="*60)
    
    # Preparar contexto
    context = f"""
AN√ÅLISE DO IMPACTO DO VAR NA PREMIER LEAGUE

DADOS COMPARATIVOS:
{df_comparison.to_string(index=False)}

VARIA√á√ïES IDENTIFICADAS:
{df_analysis.to_string(index=False)}

CONTEXTO:
- O VAR foi introduzido na temporada 2019-20
- Per√≠odo analisado: 2016-2024 (3 temporadas pr√©-VAR, 5 com VAR)
- Total de 160 registros de times analisados
"""
    
    prompt = f"""Voc√™ √© um analista de dados esportivos da Premier League.

Crie um RELAT√ìRIO EXECUTIVO de 3-4 par√°grafos sobre o impacto do VAR para apresentar aos dirigentes da liga e √† m√≠dia esportiva.

{context}

O relat√≥rio deve:
1. Resumir os principais achados de forma clara e objetiva
2. Destacar o impacto mais significativo (cart√µes vermelhos +21.45%)
3. Explicar por que p√™naltis permaneceram est√°veis
4. Concluir se o VAR est√° cumprindo seu objetivo

Use linguagem profissional mas acess√≠vel. Gere em portugu√™s do Brasil."""
    
    print("\nüìù PROMPT ENVIADO AO LLM:")
    print("-"*60)
    print(prompt[:500] + "...")
    
    print("\nü§ñ GERANDO RELAT√ìRIO...")
    
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um analista de dados esportivos da Premier League."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700
        )
        
        report = response.choices[0].message.content
        
        print("\n‚úÖ RELAT√ìRIO GERADO:")
        print("-"*60)
        print(report)
        
        return report, prompt
        
    except Exception as e:
        print(f"\n‚ùå Erro ao gerar relat√≥rio: {e}")
        return None, prompt

def predict_future_trends(df_raw):
    """
    Usa an√°lise preditiva simples para estimar tend√™ncias futuras.
    
    Args:
        df_raw: DataFrame com dados brutos
    
    Returns:
        Dict com predi√ß√µes
    """
    print("\n" + "="*60)
    print("2. AN√ÅLISE PREDITIVA DE TEND√äNCIAS")
    print("="*60)
    
    # Filtrar per√≠odo Com VAR
    df_var = df_raw[df_raw['var_period'] == 'Com VAR'].copy()
    
    # Agrupar por temporada
    temporal = df_var.groupby('season_year').agg({
        'yellow_cards_per_90': 'mean',
        'red_cards_per_90': 'mean',
        'penalties_won_per_90': 'mean'
    }).reset_index()
    
    temporal = temporal.sort_values('season_year')
    
    print("\n2.1. DADOS HIST√ìRICOS (COM VAR)")
    print("-"*60)
    print(temporal.to_string(index=False))
    
    # Predi√ß√µes simples usando regress√£o linear
    predictions = {}
    
    for metric in ['yellow_cards_per_90', 'red_cards_per_90', 'penalties_won_per_90']:
        # Criar √≠ndice num√©rico
        X = np.arange(len(temporal)).reshape(-1, 1)
        y = temporal[metric].values
        
        # Regress√£o linear simples
        coeffs = np.polyfit(X.flatten(), y, 1)
        
        # Predi√ß√£o para pr√≥ximas 2 temporadas
        next_seasons = np.array([len(temporal), len(temporal) + 1]).reshape(-1, 1)
        predictions[metric] = {
            'current_avg': y.mean(),
            'trend': 'crescente' if coeffs[0] > 0 else 'decrescente',
            'rate': coeffs[0],
            'next_season': coeffs[0] * next_seasons[0][0] + coeffs[1],
            'season_after': coeffs[0] * next_seasons[1][0] + coeffs[1]
        }
    
    print("\n2.2. PREDI√á√ïES PARA PR√ìXIMAS TEMPORADAS")
    print("-"*60)
    
    for metric, pred in predictions.items():
        metric_name = metric.replace('_', ' ').title()
        print(f"\n{metric_name}:")
        print(f"  M√©dia atual: {pred['current_avg']:.4f}")
        print(f"  Tend√™ncia: {pred['trend']}")
        print(f"  Taxa de mudan√ßa: {pred['rate']:.4f} por temporada")
        print(f"  Predi√ß√£o 2024-25: {pred['next_season']:.4f}")
        print(f"  Predi√ß√£o 2025-26: {pred['season_after']:.4f}")
    
    return predictions

def generate_ai_insights(df_comparison, df_analysis, predictions):
    """
    Usa LLM para gerar insights narrativos sobre as predi√ß√µes.
    
    Args:
        df_comparison: DataFrame com compara√ß√£o
        df_analysis: DataFrame com an√°lise
        predictions: Dict com predi√ß√µes
    
    Returns:
        Tuple (insights, prompt)
    """
    print("\n" + "="*60)
    print("3. GERA√á√ÉO DE INSIGHTS NARRATIVOS COM IA")
    print("="*60)
    
    # Preparar contexto
    pred_summary = f"""
PREDI√á√ïES PARA PR√ìXIMAS TEMPORADAS:

Cart√µes Amarelos/90min:
- Tend√™ncia: {predictions['yellow_cards_per_90']['trend']}
- Predi√ß√£o 2024-25: {predictions['yellow_cards_per_90']['next_season']:.4f}
- Predi√ß√£o 2025-26: {predictions['yellow_cards_per_90']['season_after']:.4f}

Cart√µes Vermelhos/90min:
- Tend√™ncia: {predictions['red_cards_per_90']['trend']}
- Predi√ß√£o 2024-25: {predictions['red_cards_per_90']['next_season']:.4f}
- Predi√ß√£o 2025-26: {predictions['red_cards_per_90']['season_after']:.4f}

P√™naltis a Favor/90min:
- Tend√™ncia: {predictions['penalties_won_per_90']['trend']}
- Predi√ß√£o 2024-25: {predictions['penalties_won_per_90']['next_season']:.4f}
- Predi√ß√£o 2025-26: {predictions['penalties_won_per_90']['season_after']:.4f}

IMPACTO HIST√ìRICO DO VAR:
{df_analysis.to_string(index=False)}
"""
    
    prompt = f"""Voc√™ √© um analista preditivo de futebol especializado em arbitragem.

Com base nas predi√ß√µes abaixo, gere 3 INSIGHTS ESTRAT√âGICOS sobre o futuro do VAR na Premier League.

{pred_summary}

Os insights devem:
1. Interpretar as tend√™ncias identificadas
2. Explicar poss√≠veis causas (ex: √°rbitros ficando mais rigorosos)
3. Sugerir implica√ß√µes para clubes e jogadores
4. Ser acion√°veis e pr√°ticos

Gere em formato de lista numerada, em portugu√™s do Brasil."""
    
    print("\nüìù PROMPT ENVIADO AO LLM:")
    print("-"*60)
    print(prompt[:400] + "...")
    
    print("\nü§ñ GERANDO INSIGHTS...")
    
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um analista preditivo de futebol."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=600
        )
        
        insights = response.choices[0].message.content
        
        print("\n‚úÖ INSIGHTS GERADOS:")
        print("-"*60)
        print(insights)
        
        return insights, prompt
        
    except Exception as e:
        print(f"\n‚ùå Erro ao gerar insights: {e}")
        return None, prompt

def generate_policy_recommendations(df_analysis):
    """
    Gera recomenda√ß√µes de pol√≠tica para a liga usando LLM.
    
    Args:
        df_analysis: DataFrame com an√°lise de impacto
    
    Returns:
        Tuple (recomenda√ß√µes, prompt)
    """
    print("\n" + "="*60)
    print("4. RECOMENDA√á√ïES DE POL√çTICA PARA A LIGA")
    print("="*60)
    
    context = f"""
IMPACTO DO VAR IDENTIFICADO:
{df_analysis.to_string(index=False)}

DESCOBERTAS PRINCIPAIS:
- Cart√µes vermelhos aumentaram 21.45% (impacto significativo)
- Cart√µes amarelos aumentaram 6.44% (impacto moderado)
- P√™naltis permaneceram est√°veis (+1-2%)
- Faltas n√£o mudaram

CONTEXTO:
- O VAR foi introduzido para corrigir "erros claros e √≥bvios"
- H√° debates sobre tempo de jogo perdido com revis√µes
- Alguns criticam excesso de interven√ß√µes, outros pedem mais
"""
    
    prompt = f"""Voc√™ √© um consultor de pol√≠ticas esportivas da IFAB (International Football Association Board).

Com base na an√°lise do impacto do VAR na Premier League, crie 3 RECOMENDA√á√ïES DE POL√çTICA para otimizar o uso do VAR.

{context}

As recomenda√ß√µes devem:
1. Ser baseadas em evid√™ncias dos dados
2. Equilibrar precis√£o e fluidez do jogo
3. Considerar a percep√ß√£o de jogadores, t√©cnicos e torcedores
4. Ser implement√°veis na pr√°tica

Gere em formato de lista numerada com justificativa, em portugu√™s do Brasil."""
    
    print("\nüìù PROMPT ENVIADO AO LLM:")
    print("-"*60)
    print(prompt[:400] + "...")
    
    print("\nü§ñ GERANDO RECOMENDA√á√ïES...")
    
    try:
        response = client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© um consultor de pol√≠ticas esportivas."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700
        )
        
        recommendations = response.choices[0].message.content
        
        print("\n‚úÖ RECOMENDA√á√ïES GERADAS:")
        print("-"*60)
        print(recommendations)
        
        return recommendations, prompt
        
    except Exception as e:
        print(f"\n‚ùå Erro ao gerar recomenda√ß√µes: {e}")
        return None, prompt

def save_ai_outputs(outputs, output_dir):
    """
    Salva todos os outputs de IA.
    
    Args:
        outputs: Dict com outputs gerados
        output_dir: Diret√≥rio de sa√≠da
    """
    print("\n" + "="*60)
    print("SALVANDO OUTPUTS DE IA")
    print("="*60)
    
    # Relat√≥rio para stakeholders
    if outputs.get('stakeholder_report'):
        with open(f"{output_dir}/ai_var_stakeholder_report.txt", 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("RELAT√ìRIO EXECUTIVO VAR - GERADO POR IA\n")
            f.write("="*60 + "\n\n")
            f.write("PROMPT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['stakeholder_prompt'] + "\n\n")
            f.write("OUTPUT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['stakeholder_report'])
        print(f"‚úì Relat√≥rio para stakeholders salvo")
    
    # Predi√ß√µes
    if outputs.get('predictions'):
        pred_df = pd.DataFrame(outputs['predictions']).T
        pred_df.to_csv(f"{output_dir}/ai_var_predictions.csv")
        print(f"‚úì Predi√ß√µes salvas")
    
    # Insights
    if outputs.get('insights'):
        with open(f"{output_dir}/ai_var_insights.txt", 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("INSIGHTS ESTRAT√âGICOS - GERADOS POR IA\n")
            f.write("="*60 + "\n\n")
            f.write("PROMPT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['insights_prompt'] + "\n\n")
            f.write("OUTPUT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['insights'])
        print(f"‚úì Insights estrat√©gicos salvos")
    
    # Recomenda√ß√µes de pol√≠tica
    if outputs.get('policy_recommendations'):
        with open(f"{output_dir}/ai_var_policy_recommendations.txt", 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("RECOMENDA√á√ïES DE POL√çTICA - GERADAS POR IA\n")
            f.write("="*60 + "\n\n")
            f.write("PROMPT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['policy_prompt'] + "\n\n")
            f.write("OUTPUT:\n")
            f.write("-"*60 + "\n")
            f.write(outputs['policy_recommendations'])
        print(f"‚úì Recomenda√ß√µes de pol√≠tica salvas")

# ============================================================================
# FUN√á√ÉO PRINCIPAL
# ============================================================================

def main():
    """
    Executa integra√ß√£o de IA completa para an√°lise do VAR.
    """
    print("\n" + "="*60)
    print("INTEGRA√á√ÉO DE IA - IMPACTO DO VAR")
    print("="*60)
    
    outputs = {}
    
    # Carregar dados
    df_raw, df_comparison, df_analysis = load_var_data()
    
    # 1. Gerar relat√≥rio para stakeholders
    report, report_prompt = generate_stakeholder_report(df_comparison, df_analysis)
    outputs['stakeholder_report'] = report
    outputs['stakeholder_prompt'] = report_prompt
    
    # 2. An√°lise preditiva
    predictions = predict_future_trends(df_raw)
    outputs['predictions'] = predictions
    
    # 3. Gerar insights narrativos
    insights, insights_prompt = generate_ai_insights(df_comparison, df_analysis, predictions)
    outputs['insights'] = insights
    outputs['insights_prompt'] = insights_prompt
    
    # 4. Gerar recomenda√ß√µes de pol√≠tica
    policy, policy_prompt = generate_policy_recommendations(df_analysis)
    outputs['policy_recommendations'] = policy
    outputs['policy_prompt'] = policy_prompt
    
    # Salvar outputs
    save_ai_outputs(outputs, OUTPUT_DIR)
    
    print("\n" + "="*60)
    print("‚úì INTEGRA√á√ÉO DE IA CONCLU√çDA!")
    print("="*60)
    print(f"\nArquivos salvos em: {OUTPUT_DIR}")

if __name__ == "__main__":
    main()

